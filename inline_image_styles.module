<?php

/**
 * @file
 * Inline Image Styles.
 */

/**
 * Implements hook_form_FORM_ID_alter() for CKEditor image dialog form.
 */
function inline_image_styles_form_filter_format_editor_image_form_alter(&$form, &$form_state) {

  // Retrieve stored attributes from the session, if available
  $values = $_SESSION['inline_image_styles_last_attributes'];

  $options = array("none" => t('Original'));
  foreach (image_styles() as $name => $style) {
    $options[$name] = $style['label'];
  }

  // Add the select field to the form.
  $form['image_style'] = array(
    '#title' => t('Image Style'),
    '#type' => 'select',
    '#default_value' => isset($values['data-image-style']) ? $values['data-image-style'] : 'none',
    '#options' => $options,
    '#wrapper_attributes' => array('class' => array('editor-image-style')),
    '#parents' => array('attributes', 'data-image-style'),
  );

  // Adjust the AJAX callback for the form submission.
  $form['actions']['submit']['#ajax']['callback'] = 'inline_image_styles_format_editor_dialog_save';
}

/**
 * Custom AJAX callback function for the CKEditor image dialog form submission.
 */
function inline_image_styles_format_editor_dialog_save($form, &$form_state) {
  $return = filter_format_editor_dialog_save($form, $form_state);
  if (isset($return['#commands'][0]['values']['attributes']['data-file-id'])) {
    $fid = $return['#commands'][0]['values']['attributes']['data-file-id'];
    if (!empty($fid)) {
      $style_name = $return['#commands'][0]['values']['attributes']['data-image-style'];

      $file = file_load($fid);
      $path = ($style_name == 'none') ? file_create_url($file->uri)
        : image_style_url($style_name, $file->uri);
      // Check if path needs parsing
      if (strpos($file->uri, 'public://') !== FALSE
        || strpos(
          $file->uri,
          'private://'
        ) !== FALSE
      ) {
        // Parse the URL to extract its components since it's a managed file path
        $urlComponents = parse_url($path);
        // Extract the path component, which is the relative URL
        $relativePath = $urlComponents['path'];
      }
      else {
        // Use the $path as is since it doesn't contain 'public://' or 'private://'
        $relativePath = $path;
      }
      if ($return['#commands'][0]['values']['attributes']['src'] != $relativePath
      ) {
        if ($return['#commands'][0]['values']['attributes']['src'] != $relativePath
        ) {
          $form_state['values']['attributes']['src'] = $relativePath;
          $return['#commands'][0]['values']['attributes']['src'] = $relativePath;

          // Clear image width & height if style has changed, but not size.
          if (isset($form_state['values']['attributes']['data-image-style'])
            && $form_state['values']['attributes']['data-image-style'] != 'none'
          ) {
            // Clear width and height because a style is applied
            $form_state['values']['attributes']['width'] = '';
            $return['#commands'][0]['values']['attributes']['width'] = '';
            $form_state['values']['attributes']['height'] = '';
            $return['#commands'][0]['values']['attributes']['height'] = '';
          }
          // Ensure the data-image-style attribute is updated
          $form_state['values']['attributes']['data-image-style'] = $style_name;
          $return['#commands'][0]['values']['attributes']['data-image-style'] = $style_name;
        }
      }
    }
  }
  // Store the attributes array in the user's session for retrieval in form_alter
  $_SESSION['inline_image_styles_last_attributes'] = $form_state['values']['attributes'];
  return $return;
}

/**
 * Implements hook_ckeditor_plugins().
 *
 * Registers a CKEditor plugin to allow selection of image styles within
 * CKEditor, without adding a button to the toolbar.
 */
/*function inline_image_styles_ckeditor_plugins() {
  $module_path = backdrop_get_path('module', 'inline_image_styles');
  // Adjusted the path to reflect the actual location of plugin.js
  $plugin_path = $module_path . '/ckeditor/plugins';
  $plugins['inline_image_styles_ckeditor'] = [
    'path' => $plugin_path,
    'file' => 'plugin.js', // This now correctly points to the file location
    'internal' => FALSE,
    'enabled callback' => 'inline_image_styles_plugin_check',
  ];
  return $plugins;
}*/

/**
 * Implements hook_ckeditor_plugins_alter().
 */
function inline_image_styles_ckeditor_plugins_alter(&$plugins) {
  // Replaced.
  $path = backdrop_get_path('module', 'inline_image_styles');
  $image_prefix = backdrop_get_path('module', 'ckeditor') . '/images/buttons/';

  // The backdropimage plugin replaces normal image functionality.
  $plugins['backdropimage'] = array(
    'path' => $path . '/ckeditor/plugins/backdropimage',
    'file' => 'plugin.js',
    'buttons' => array(
      'BackdropImage' => array(
        'label' => t('Image'),
        'required_html' => array(
          array(
            'tags' => array('img'),
            'attributes' => array('src', 'alt', 'data-file-id', 'data-align'),
          ),
        ),
        'image' => $image_prefix . 'image.png',
      ),
    ),
  );

  // The backdropcaption plugin provides consistent behaviors for image captions.
  $plugins['backdropimagecaption'] = array(
    'path' => $path . '/ckeditor/plugins/backdropimagecaption',
    'file' => 'plugin.js',
    'css' => array(backdrop_get_path('module', 'ckeditor') . '/css/ckeditor-caption.css'),
    'enabled callback' => 'ckeditor_image_plugin_check',
    'required_html' => array(
      array(
        'tags' => array('img'),
        'attributes' => array('data-caption'),
      ),
      array(
        'tags' => array('figure', 'figcaption'),
        'attributes' => array('src', 'alt', 'class', 'data-placeholder'),
      ),
    )
  );
}

/**
 * Implements hook_library_info_alter().
 */
function inline_image_styles_library_info_alter(&$libraries, $module) {
  // Check if the CKEditor 5 module's libraries are being altered
  if ($module == 'ckeditor5' && isset($libraries['backdrop.ckeditor5.backdrop-image'])) {
    $path = backdrop_get_path('module', 'inline_image_styles')
      . '/ckeditor5/plugins/backdrop-image/backdrop-image.js';

    // Correctly structure the JS array to include the custom plugin script
    // Note: Adjusting to the correct format as per Backdrop documentation
    $libraries['backdrop.ckeditor5.backdrop-image']['js'][$path] = array('group' => JS_LIBRARY, 'weight' => 5);
  }
}

/**
 * Implements hook_ckeditor5_plugins_alter().
 */
function inline_image_styles_ckeditor5_plugins_alter(array &$plugins) {
  $image_prefix = backdrop_get_path('module', 'ckeditor5') . '/icons/';
  // The BackdropImage plugin extends the default CKEditor Image plugin.
  $plugins['backdropImage.BackdropImage'] = [
    'library' => ['ckeditor5', 'backdrop.ckeditor5.backdrop-image'],
    'buttons' => [
      'backdropImage' => [
        'label'               => t('Image'),
        'plugin_dependencies' => [
          'image.Image',
          'image.ImageToolbar',
          'image.ImageInsertUI',
          'image.ImageUpload',
          'image.ImageResize',
          'image.ImageCaptionUtils',
        ],
        'required_html'       => [
          '<img src alt height width data-file-id data-image-style>',
        ],
        'image'               => $image_prefix . '/image.svg',
      ],
    ],
    'config'  => [
      'image'         => [
        // Configure the balloon toolbar items shown when an image is selected.
        'toolbar'    => [
          'imageTextAlternative',
          'editBackdropImage',
        ],
        'upload'     => [
          'type' => image_get_supported_extensions(),
        ],
        'resizeUnit' => 'px',
      ],
      'backdropImage' => [
        'editLabel'       => t('Edit Image'),
        'insertLabel'     => t('Insert Image'),
        // Specify an array of CKEditor model name => attribute name values.
        // These attributes are then allowed to be changed via the Backdrop
        // image dialog. Additional attributes can be added here to prevent
        // CKEditor from striping out attributes on img tags.
        'extraAttributes' => [
          'dataFileId' => 'data-file-id',
          'alt'        => 'alt',
          'src'        => 'src',
          'width'      => 'width',
          'height'     => 'height',
        ],
      ],
    ],
  ];
}

/**
 * Callback to enable CKEditor inline image style plugin.
 */
/*function inline_image_styles_plugin_check($format, $plugin_name) {
  return !empty($format->editor_settings['inline_image_styles_ckeditor']['status']);
}*/

/**
 * Implements hook_form_FORM_ID_alter() to add inline image style settings to the text format editor.
 */
/*function inline_image_styles_form_filter_admin_format_form_alter(&$form, &$form_state) {
  // Retrieve existing settings or set defaults.
  $settings = isset($form_state['format']->editor_settings['inline_image_styles_ckeditor'])
    ? $form_state['format']->editor_settings['inline_image_styles_ckeditor']
    : ['status' => FALSE];

  // Define the fieldset for CKEditor inline image style settings.
  $form['editor_settings']['plugins']['inline_image_styles_ckeditor'] = [
    '#type' => 'fieldset',
    '#title' => t('Inline Image Styles'),
    '#tree' => TRUE,
    '#attributes' => ['class' => ['inline-image-styles-settings']],
    '#parents' => ['editor_settings', 'inline_image_styles_ckeditor'],
  ];

  // Add a checkbox to enable/disable the feature.
  $form['editor_settings']['plugins']['inline_image_styles_ckeditor']['status'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable'),
    '#default_value' => $settings['status'],
    '#description' => t('Enable inline image styles in CKEditor.'),
  ];
}*/



